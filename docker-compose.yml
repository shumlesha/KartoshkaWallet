version: '3.9'
services:
  # Сервис для разворачивания контейнера с базой данных
  postgres:
    container_name: postgres
    image: postgres:12
    hostname: database
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5430:5432"
    networks:
      - monitoring

  # Сервис для разворачивания контейнера с приложением
  webapi:
    build:
      dockerfile: Dockerfile
      context: .
    hostname: webapi
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    environment:
      - HOST=postgres
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - DDL_AUTO=${DDL_AUTO}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ACCESS=${JWT_ACCESS}
      - JWT_REFRESH=${JWT_REFRESH}
    healthcheck:
      test: curl http://localhost:8080 || exit 0
      interval: 10s
      retries: 5
      start_period: 15s
      timeout: 10s
    networks:
      - monitoring

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    healthcheck:
      test: curl http://localhost:9090 || exit 0
      interval: 10s
      retries: 5
      timeout: 5s
    networks:
      - monitoring

  grafana:
    image: grafana/grafana
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - DS_PROMETHEUS=prometheus
      - PROMETHEUS_URL=http://prometheus:9090
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - monitoring

networks:
  monitoring:
    driver: bridge